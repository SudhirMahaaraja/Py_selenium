# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestDefaultSuite():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_test1(self):
    # Test name: test1
    # Step # | name | target | value
    # 1 | open | /index.html | 
    self.driver.get("https://trytestingthis.netlify.app/index.html")
    # 2 | setWindowSize | 1536x864 | 
    self.driver.set_window_size(1536, 864)
    # 3 | click | css=label:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, "label:nth-child(2)").click()
    # 4 | type | id=fname | Sudhir
    self.driver.find_element(By.ID, "fname").send_keys("Sudhir")
    # 5 | type | id=lname | Mahaaraja
    self.driver.find_element(By.ID, "lname").send_keys("Mahaaraja")
    # 6 | click | id=male | 
    self.driver.find_element(By.ID, "male").click()
    # 7 | click | id=option | 
    self.driver.find_element(By.ID, "option").click()
    # 8 | select | id=option | label=Option 1
    dropdown = self.driver.find_element(By.ID, "option")
    dropdown.find_element(By.XPATH, "//option[. = 'Option 1']").click()
    # 9 | addSelection | id=owc | label=Option 3
    dropdown = self.driver.find_element(By.ID, "owc")
    dropdown.find_element(By.XPATH, "//option[. = 'Option 3']").click()
    # 10 | addSelection | id=owc | label=Option
    dropdown = self.driver.find_element(By.ID, "owc")
    dropdown.find_element(By.XPATH, "//option[. = 'Option']").click()
    # 11 | click | name=option3 | 
    self.driver.find_element(By.NAME, "option3").click()
    # 12 | click | name=Options | 
    self.driver.find_element(By.NAME, "Options").click()
    # 13 | type | name=Options | Vanilla
    self.driver.find_element(By.NAME, "Options").send_keys("Vanilla")
    # 14 | click | id=favcolor | 
    self.driver.find_element(By.ID, "favcolor").click()
    # 15 | type | id=favcolor | #d10099
    self.driver.find_element(By.ID, "favcolor").send_keys("#d10099")
    # 16 | click | css=fieldset:nth-child(1) | 
    self.driver.find_element(By.CSS_SELECTOR, "fieldset:nth-child(1)").click()
    # 17 | click | id=day | 
    self.driver.find_element(By.ID, "day").click()
    # 18 | click | id=day | 
    self.driver.find_element(By.ID, "day").click()
    # 19 | type | id=day | 2025-01-07
    self.driver.find_element(By.ID, "day").send_keys("2025-01-07")
    # 20 | click | id=quantity | 
    self.driver.find_element(By.ID, "quantity").click()
    # 21 | type | id=quantity | 1
    self.driver.find_element(By.ID, "quantity").send_keys("1")
    # 22 | click | id=quantity | 
    self.driver.find_element(By.ID, "quantity").click()
    # 23 | click | id=quantity | 
    self.driver.find_element(By.ID, "quantity").click()
    # 24 | doubleClick | id=quantity | 
    element = self.driver.find_element(By.ID, "quantity")
    actions = ActionChains(self.driver)
    actions.double_click(element).perform()
    # 25 | click | name=message | 
    self.driver.find_element(By.NAME, "message").click()
    # 26 | type | name=message | The cat was playing in the garden.no good
    self.driver.find_element(By.NAME, "message").send_keys("The cat was playing in the garden.no good")
    # 27 | click | css=.btn | 
    self.vars["window_handles"] = self.driver.window_handles
    # 28 | storeWindowHandle | root | 
    self.driver.find_element(By.CSS_SELECTOR, ".btn").click()
    # 29 | selectWindow | handle=${win5395} | 
    self.vars["win5395"] = self.wait_for_window(2000)
    # 30 | selectWindow | handle=${root} | 
    self.vars["root"] = self.driver.current_window_handle
    # 31 | click | id=uname | 
    self.driver.switch_to.window(self.vars["win5395"])
    # 32 | type | id=uname | test
    self.driver.switch_to.window(self.vars["root"])
    # 33 | click | id=pwd | 
    self.driver.find_element(By.ID, "uname").click()
    # 34 | type | id=pwd | test
    self.driver.find_element(By.ID, "uname").send_keys("test")
    # 35 | click | css=input:nth-child(10) | 
    self.driver.find_element(By.ID, "pwd").click()
    self.driver.find_element(By.ID, "pwd").send_keys("test")
    self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(10)").click()
  
